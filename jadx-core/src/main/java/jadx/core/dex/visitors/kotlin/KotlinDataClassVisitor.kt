package jadx.core.dex.visitors.kotlin

import jadx.core.dex.nodes.ClassNode
import jadx.core.dex.visitors.AbstractVisitor
import jadx.core.dex.visitors.InitCodeVariables
import jadx.core.dex.visitors.JadxVisitor
import jadx.core.dex.visitors.ProcessInstructionsVisitor
import jadx.core.dex.visitors.debuginfo.DebugInfoApplyVisitor
import jadx.core.dex.visitors.rename.CodeRenameVisitor
import jadx.core.utils.kmCls
import jadx.core.utils.kotlin.KotlinDataClassUtils

@JadxVisitor(
	name = "KotlinDataClassVisitor",
	desc = "Use data class autogenerated toString to rename methods and variables",
	runAfter = [
		InitCodeVariables::class,
		DebugInfoApplyVisitor::class,
		ProcessKotlinInternals::class,
		ProcessInstructionsVisitor::class,
   ],
	runBefore = [
		CodeRenameVisitor::class,
	]
)
class KotlinDataClassVisitor : AbstractVisitor() {

	override fun visit(cls: ClassNode): Boolean {
		cls.innerClasses.forEach(::visit)

		val kmCls = cls.kmCls
		if (kmCls != null) {
			KotlinDataClassUtils.fixDataClass(cls, kmCls)
		}

		return false
	}
}
